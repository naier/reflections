What happens when you initialize a repository? Why do you need to do it?

	Inititalizing a repository is the first step to convert a regular directory
	into a git repository. It creates the hidden .git file which stores the
	metadata containing the history of each commit. Once this file is created,
	we can proceed with our first commit. Note that git does not automatically
	create the first commit when you initialize the repository.

How is the staging area different from the working directory and the repository?
What value do you think it offers?
	
	The staging area is an intermediate area between the working directory and
	the repository. It holds the files that you would like to commit from your
	directory. We can remove files from the staging area if we do not wish to
	commit them (or if they were added accidentaly).

How can you use the staging area to make sure you have one commit per logical
change?
	
	The staging area acts as a holding area to keep all the changes you want to
	commit. Once you have have identified and added all the files that you
	want to include in a given commit, you can commit the entire set in one go
	and give it a logical commit message.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
	
	Branches are useful when we want to add experimental features to an
	application that are not yet ready for primetime. Examples of these experimental
	features could be framework level changes or adding new language support.
	Branches help to keep the changes isolated while the master branch can be
	continued to be used for making bug fixes to the "live" application. When
	the new features are ready to be deployed for consumption by the end user,
	the branch containing these changes can be merged into the master branch.

How do the diagrams help you visualize the branch structure?

	The diagrams provide an easier way of identifying the various branches
	and their current state. It also provides a summarized view of the changes
	made in each commit in each branch.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

	Merging two branches together merges the changes from the commits from the times
	the two branches differed into a single new commit. The representation in the
	diagram is driven by the point that the new commit has two parents - one from
	each branch.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?

	The biggest advante of Git's automatic merging is that it does most of the
	job for you if conflicts don't arise between various versions. If conflicts
	do arise, Git points out exactly where a conflict occured and requires the
	developer to resolve them. On the flip side, these conflicts might sometimes
	be very trivial and we might have expected Git to resolve them automatically.
	In such instances we end up spending time resolving such seemingly trivial
	conflicts, but from an overall effort standpoint, it still beats doing merges
	manually. 

	Manual merges are time consuming and are fraught with user errors.