When would you want to create a remote repository rather than keeping all your work local?
    
    A remote repository is useful when we are using multiple computers to manager our work.
    It is also useful when multiple team members are collaborating on a project.
    An added benefit of a remote repository is that it is a better way of backing up our work.

Why might you want to always pull changes manually rather than having Git automatically 
stay up-to-date with your remote repository?

	If Git automatically pulls changes from the remote repository, we risk losing any changes
	we made in our local files after we last pushed them to the remote repository. Doing
	this manually gives us better control of resolving any conflicts that might arise
	between the local changes and the new changes in the remote repository.

Describe the differences between forks, clones, and branches. When would you use 
one instead of another?

	Fork creates a copy of another repository on GitHub - it's like cloning, except it's
	performed on the remote repository. Clone creates a copy of a remote repository in a
	local repository. It can also create a copy of another local repository. Branches are
	created whenever a separate code stream becomes necessary - for example, experimenting
	on a new feature that's not ready for production yet.

What is the benefit of having a copy of the last known state of the remote stored locally?

	Storing the last known state of the remote locally helps in situations where we don't
	expect to have internet connectivity (like on planes). It also helps to compare the
	local master with the remote master in collaborative projects and resolve any conflicts
	between the two. This helps while merging changes between the two branches to get them
	in-sync.

How would you collaborate without using Git or GitHub? What would be easier, and 
what would be harder?

	We could collaborate by sharing files over emails or creating a shared folder on a remote
	desktop/server. We could also use tools like Google Drive or Dropbox. If we went with the
	latter option, files would be synced automatically. But all of these options lack the robust
	collaboration features of GitHub like forking and pull requests.

When would you want to make changes in a separate branch rather than directly in master?
What benefits does each approach have?

	Making changes in a separate branch makes sense when you are working on a new feature
	instead of fixing production bugs. This way you can get the changes vetted by other
	collaborators and then push it to master when it's ready for production.